import fs from "fs"
import gulp from "gulp"
import rename from "gulp-rename"
import header from "gulp-header"
import sourcemaps from "gulp-sourcemaps"
import dartSass from "sass"
import gulpSass from "gulp-sass"
import autoprefixer from "gulp-autoprefixer"
import pug from "gulp-pug"

import { each } from "./src/browser/js/core/util/common.js"
import { mcbelist } from "./src/mcbelist.js"
import { LANGUAGES } from "./src/data.js"

const sass = gulpSass(dartSass)
const pkg = JSON.parse(fs.readFileSync("./package.json").toString())
const banner = `
/*!
 * ${pkg.name}.css v${pkg.version} (${pkg.homepage})
 * Copyright 2022-${new Date().getFullYear()} ${pkg.author}
 * Licensed under ${pkg.license}
 * 
 * This file is automatically generated, please do not change it.
 */
`.trim()

function mainCss() {
    return gulp.src("./src/browser/style/index.scss")
        .pipe(sourcemaps.init())
        .pipe(sass({ outputStyle: "compressed" }).on("error", sass.logError))
        .pipe(header(banner))
        .pipe(autoprefixer())
        .pipe(rename("index.min.css"))
        .pipe(sourcemaps.write("./"))
        .pipe(gulp.dest("./public/css"))
}

export const css = gulp.parallel(mainCss)

function mainHtml() {
    return gulp.src("./views/index.pug")
        .pipe(rename("index.html"))
        .pipe(pug())
        .pipe(header("<!-- This file is automatically generated, please do not change it. -->"))
        .pipe(gulp.dest("./public"))
}

export const html = gulp.parallel(mainHtml)

async function mcbelistData() {
    return new Promise((resolve, reject) => {
        fs.rmSync("./public/api", {
            recursive: true,
            force: true
        })
        fs.mkdirSync("./public/api")
        each(LANGUAGES, ({ branches }, lang) => {
            each(branches, (_, branch) => {
                mcbelist(lang, branch).then(data => {
                    fs.writeFileSync(`./public/api/mcbelist.${lang}.${branch}.min.js`, "export default " + data)
                    resolve()
                }).catch(err => reject(err))
            })
        })
    })
}

export const data = gulp.parallel(mcbelistData)

async function mduiFiles() {
    return new Promise((resolve, reject) => {
        fs.rmSync("./public/lib", {
            recursive: true,
            force: true
        })
        fs.cp("./node_modules/mdui", "./public/lib/mdui", { recursive: true }, err => {
            if (err) reject()
            else resolve()
        })
    })
}

export const mdui = gulp.parallel(mduiFiles)

export default gulp.series(css, html, data, mdui)
