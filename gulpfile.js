import fs from "fs/promises"
import { readFileSync } from "fs"

import dartSass from "sass"

import gulp from "gulp"
import rename from "gulp-rename"
import header from "gulp-header"
import sourcemaps from "gulp-sourcemaps"
import gulpSass from "gulp-sass"
import autoprefixer from "gulp-autoprefixer"
import pug from "gulp-pug"

import { rollup } from "rollup"
import genRollupConfig from "./rollup.js"

import { asyncEach } from "./lib/util/index.js"
import { getMcbelist } from "./lib/mcbelist.node.js"
import { LANGUAGES } from "./src/data.js"

const sass = gulpSass(dartSass)
const pkg = JSON.parse(readFileSync("./package.json").toString())
const banner = fileName => `
/*!
 * ${fileName} v${pkg.version} (${pkg.homepage})
 * Copyright 2022-${new Date().getFullYear()} ${pkg.author}
 * Licensed under ${pkg.license}
 * 
 * This file is automatically generated, please do not change it.
 */
`.trim()
const rollupConfig = genRollupConfig(banner, pkg)

export const js = gulp.series(...rollupConfig.map(config => {
    const fn = async function() {
        const result = await rollup({
            input: config.input,
            plugins: config.plugins
        })
        await result.write(config.output)
    }
    Object.defineProperty(fn, "name", {
        value: config.name
    })
    return fn
}))

export const css = gulp.parallel(
    function mainCSS() {
        return gulp.src("./style/index.scss")
            .pipe(sourcemaps.init())
            .pipe(sass({ outputStyle: "compressed" }).on("error", sass.logError))
            .pipe(header(banner(`${pkg.name}-main.css`)))
            .pipe(autoprefixer())
            .pipe(rename("index.min.css"))
            .pipe(sourcemaps.write("./"))
            .pipe(gulp.dest("./public/css"))
    }
)

export const html = gulp.parallel(
    function mainHTML() {
        return gulp.src("./views/index.pug")
            .pipe(rename("index.html"))
            .pipe(pug())
            // .pipe(header("<!-- This file is automatically generated, please do not change it. -->"))
            .pipe(header(`<!-- ${banner(`${pkg.name}-main.html`)} -->`))
            .pipe(gulp.dest("./public"))
    }
)

export const data = gulp.parallel(
    async function mcbelist() {
        await fs.rm("./public/api", {
            recursive: true,
            force: true
        })
        await fs.mkdir("./public/api")
        await asyncEach(LANGUAGES, async ({ branches }, lang) => {
            await asyncEach(branches, async (_, branch) => {
                const data = await getMcbelist(lang, branch)
                const name = `mcbelist.${lang}.${branch}.min.js`
                await fs.writeFile(`./public/api/${name}`, `${banner(name)}export default ${data}`)
            })
        })
    }
)

export const lib = gulp.series(
    async function clear() {
        await fs.rm("./public/lib", {
            recursive: true,
            force: true
        })
    },
    gulp.parallel(
        async function mdui() {
            await fs.cp("./node_modules/mdui", "./public/lib/mdui", { recursive: true })
        },
        async function ghcss() {
            await fs.cp("./node_modules/github-markdown-css", "./public/lib/github-markdown-css", { recursive: true })
        }
    )
)

export default gulp.series(js, css, html, data, lib)
